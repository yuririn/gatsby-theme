{"expireTime":9007200880801114000,"key":"transformer-remark-markdown-html-24adef831106b594cf7c85b2bd523eab-gatsby-remark-imagesgatsby-remark-autolink-headersgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h2 id=\"ねえねえ知ってる？-wordpress-の自作した機能は整理しておかないと、めちゃめちゃカオスになるんだよ\">ねえねえ知ってる？ WordPress の自作した機能は整理しておかないと、めちゃめちゃカオスになるんだよ</h2>\n<p>WordPress で自作した機能はまとめておかないとめちゃめちゃカオスになります泣（経験者は語る）</p>\n<p>自作する機能が増えてくると、ついつい functions.php 内が長ーーいコードになってしまい、後から修正するときに何をどこに書いたか忘れてしまうということもあると思います。コメント入れていますが、どういう関数に書いたか、どんな機能を追加したかも忘れてしまう始末。</p>\n<p><strong>昨日食べたご飯もなにだったか忘れる</strong>のに覚えてられるかーーーー！</p>\n<p>その対策として、私は今まで functions.php に機能ごとに分けてインクルードしていました。</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// ショートコード----------------------------------------------</span>\n<span class=\"token keyword\">require</span> <span class=\"token function\">get_template_directory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/functions/shortcode.php'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>この方法に切り替えてからは、1ファイルにまとめて書いていた頃より、なんぼか楽にはなりましたがやっぱりカオスっちゃカオス。</p>\n<p>一個間違えたらみなこける！みんな仲良しすぎ！</p>\n<p>どうにかならんもんかなーと思っておりましたら、数年前からプラグインにまとめると幸せになれるよ、という声を各方面からチラチラ聞いていたのでやっと重い腰をあげてやってみることにしました。</p>\n<h2 id=\"プラグインにまとめるメリット\">プラグインにまとめるメリット</h2>\n<p>プラグイン化するメリットは以下の通りです。</p>\n<ul>\n<li>管理画面をプラグイン一覧を見ればどんな機能を入れたか一目瞭然。運用中は目に見えて使わない機能は何実装していたっけと良くなるので地味に助かるし、コードを書かない人たちにも可視化できるのは嬉しい</li>\n<li>ファイルが機能ごとにまとめられてスッキリ。機能ごとにフォルダにまとめられる上に、めちゃめちゃ整理整頓されます。スパゲティコードも回避できます</li>\n<li>機能ごとにプラグイン化してあるので、他テーマへの使い回しが楽</li>\n<li>プラグインごとに機能を自作してデバッグすればいいので、何でエラーを吐いているかとか開発もしやすい</li>\n</ul>\n<p>チームでも共有・共同開発もしやすくなると思いますし、とにもかくも、<strong>取っ散らかる前にプラグイン化して整理する</strong>に限ります。</p>\n<h2 id=\"プラグイン化の方法\">プラグイン化の方法</h2>\n<p>プラグイン化はとっても簡単です。</p>\n<p>wp-content/plugins 内にファイルを突っ込むだけです。\n例えば sample.php といったファイルに機能を書くなら、中身はこんな感じです。</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">/**\n* @package sample\n* @version 1.0\n*/</span>\n<span class=\"token comment\">/*\nPlugin Name: サンプル\nDescription: サンプルだよーーーん\nAuthor: 銀ねこアトリエ\nVersion: 1.0\nAuthor URI: http://172.16.54.25/\n*/</span></span></code></pre></div>\n<p>といった感じでファイルの冒頭に書くだけです。プラグイン一覧に以下のように出力されます。\n<img src=\"./images/2018/entry283-1.png\" alt=\"プラグイン一覧に以下\"></p>\n<h2 id=\"さらに細分化して複数のファイルに機能を分けてフォルダにまとめたい場合\">さらに細分化して複数のファイルに機能を分けてフォルダにまとめたい場合</h2>\n<p>例えば、SEO で必要なタイトルタグやメタディスクリプションなどをカスタムフィールドで投稿画面に実装することもあると思います。<br>\nしかも、文字数カウンターをつけたりCSSで調整してリッチにしたい場合、専用のCSSやJSも用意しないといけない場合もあります。<br>\nその他 SEO 的に必要な構造化データを出力したくなったりと機能は山盛りになってしまいます。<br>\nそんな時こそプラグインにまとめるとスッキリします。</p>\n<p>以下のようなファイル構造でプラグインを作ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seo_set/\n  |  customfield.php\n  |  jsonld.php\n  |  meta.php\n  |  ogp.php\n  |  seo_set.php\n  └ assets /\n    ├ css/\n     |    seo_style.css\n    └ js/\n           seo_script.js</code></pre></div>\n<p>seo_set.php には以下のようなコードで他のファイル類を読み込みます。</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">/**\n* @package seo_set\n* @version 1.0\n*/</span>\n<span class=\"token comment\">/*\nPlugin Name: SEOの設定\nDescription: ページごとに任意のタイトルやサイトの説明を投稿画面から編集できます。\nAuthor: 銀ねこアトリエ\nVersion: 1.0\nAuthor URI: http://172.16.54.25/\n*/</span><span class=\"token comment\">//プラグインのパス</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'SEO__PLUGIN_DIR'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">plugin_dir_path</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//各ファイルをインクルードする</span>\n<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SEO__PLUGIN_DIR</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'customfield.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SEO__PLUGIN_DIR</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'jsonld.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SEO__PLUGIN_DIR</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'meta.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SEO__PLUGIN_DIR</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'ogp.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>あとは各ファイルにコードを書いていきます。</p>\n<h2 id=\"おまけ：プラグイン内のcssやjsを管理画面に適応する場合\">おまけ：プラグイン内のCSSやJSを管理画面に適応する場合</h2>\n<p>プラグイン内のJSやCSSを管理画面に適応する場合は<code class=\"language-text\">admin_enqueue_scripts</code>を使用します。scripts なんて言っているけどスタイルとかのデータも追記してくれます。</p>\n<p>個人的には管理画面くらいなら、モバイルファーストインデックスを意識しなくていいと思うので、ファイルが多少細分化しても管理画面が重くなけりゃいいと思う。</p>\n<p>ちなみに、エンキュー(encueue)とはキュー(cueue/先に入れたものが先に出る構造になっている何か)にデータを入れることだそう。</p>\n<p>よくキュー状態とか言いますよね？会社で複数人で一つのプリンターとか使った経験がある人ならわかるかも。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// CSS/JSの読み込み\nfunction custom_enqueue($hook_suffix)\n{\n    // 新規投稿または編集画面のみに適応\n    if ('post.php' == $hook_suffix || 'post-new.php' == $hook_suffix) {\n        $jspath = plugins_url('assets/js/script.js', __FILE__);\n        $csspath = plugins_url('assets/css/css_style.css', __FILE__);        wp_enqueue_script('vue', '//cdnjs.cloudflare.com/ajax/libs/vue/2.5.2/vue.min.js', array(), '1.0.0', true);\n        wp_enqueue_script('seo_script', $jspath, array(), '1.0.0', true);\n        wp_enqueue_style('seo_css', $csspath, array(), '1.0.0');\n    }\n}// 関数を管理画面のキューアクションにフック\nadd_action('admin_enqueue_scripts', 'custom_enqueue');</code></pre></div>\n<p>admin_enqueue_scripts の用法もっと詳しく載ってないかなと思い、WordPress Codex 行ってリファレンス探してみたら英語しかありませんでした笑</p>\n<p><a href=\"https://codex.wordpress.org/Plugin_API/Action_Reference/admin_enqueue_scripts\">Plugin API/Action Reference/admin enqueue scripts</a></p>\n<h2 id=\"まとめ：たくさんカスタマイズしたいならプラグイン化するのは絶対オススメ！\">まとめ：たくさんカスタマイズしたいならプラグイン化するのは絶対オススメ！</h2>\n<p>以上、WordPress の自作した機能をWordPressにまとめる方法をご紹介いたしました。</p>\n<p>今回はプラグイン化の方法のみのご紹介です。</p>\n<p>中身は頑張って書いてくださいね。えへっ</p>"}