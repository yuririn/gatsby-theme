{"expireTime":9007200880808502000,"key":"transformer-remark-markdown-html-5bf5bb539588d25229c6ae1bbd1fb827-gatsby-remark-imagesgatsby-remark-autolink-headersgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h2 id=\"mfi、speed-updateなど、フロントエンジニアに課題が増える\">MFI、Speed Updateなど、フロントエンジニアに課題が増える</h2>\n<p>ここ数年、Web制作の業界ではjQuery離れの傾向がありjQueryなしでJSを取り扱うことが多くなってきました。</p>\n<p>jQueryの難点はライブラリ読見込むことで、jQuery以外にもjQuery依存のファイルを何種類も使うことも多くあり、ページ読み込み速度も低下します。今年始まった、Speed Update やMFI（モバイルファーストインデックス) もあり、モバイルで読み込みが遅くならないように工夫したり、表示速度にめちゃめちゃ気を使わないといけなくなり、最近はライブラリなしで動く<strong>Vanilla JS</strong>を重宝するようになりました。</p>\n<h2 id=\"vanilla-jsってなんぞ？\">Vanilla JSってなんぞ？</h2>\n<p>Vanilla JSとはJSでライブラリ0バイトの超軽量で動くJS、、、と、ジョークでよく紹介されてますが早い話、単なるJS　です。ジョークに付き合いたい人は是非、こちらのサイトをみてみてください。</p>\n<p><a href=\"http://vanilla-js.com/\">http://vanilla-js.com/</a></p>\n<h2 id=\"早速いろんな値を取ってくる\">早速いろんな値を取ってくる</h2>\n<p>では早速、カスタムデータやリンクやソースを取得してみましょう。</p>\n<h3 id=\"要素を取得\">要素を取得</h3>\n<p>次のタグから各値を取得してみましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;img id=\"test\" class=\"test\" src=\"assets/img/dummy.png\" data-src=\"assets/img/js-icon.png\" width=\"300\" height=\"300\" alt=\"jsのアイコン\"></code></pre></div>\n<h4 id=\"idから要素を取得\">IDから要素を取得</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//jQuery\nelm = $('#test')\n//JS\nelm = document.getElementById('test')</code></pre></div>\n<p>取得できるデータをconsole.logに突っ込んで比べてみます。</p>\n<p>JSはタグを丸っと取得しているのに対しjQueryは配列でそれぞれの値を取得しています。</p>\n<p>取得されている値の形式が違うので、取得した値はJS、jQueryの各メソッドじゃないと操作できない場合がありますのでご注意を。</p>\n<h4 id=\"要素名タグから要素を取得\">要素名(タグ)から要素を取得</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//jQuery\nelm = $('img')\n//JS\nelm = document.getElementsByTagName('img')\nelm = elm[0]\n</code></pre></div>\n<p>JSはdocument.getElements〜とあるように複数を取得するのが前提なので、何個目のimgタグか指定してする必要があります。今回は一個しか書いてないので[0]を指定してやります。</p>\n<h4 id=\"クラスから取得\">クラスから取得</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//jQuery\nelm = $('.test')\n// JS\nelm = document.getElementsByclass('test')\nelm = elm[0]</code></pre></div>\n<p>classで取得するときも同様で、[0]で何個目のクラスか指定して取得してます。</p>\n<h3 id=\"要素から値を取り出す\">要素から値を取り出す</h3>\n<p>変数elmに代入された、要素の値を取り出してみます。</p>\n<p>注意点はカスタムデータ属性の取得くらいです。</p>\n<p>jQueryではdata()メソッドでも取得できます。昔、喜び勇んでdata()を使ってIEで予想外の挙動をした苦い経験をしました。<br>\nIE対応を強要されるのであれば、attr()だけを使うことをオススメします。</p>\n<p>JSも同様でカスタムデータを取得する独自の方法はありますが、要素の属性を取得するgetAttribute()メソッドを使えば、カスタムデータ属性*を取得できます（テストしてないですが今は11はおっけーみたいです）。</p>\n<p><a href=\"jQuery%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%87%E3%83%BC%E3%82%BF%E5%B1%9E%E6%80%A7(data-*)%E3%81%AE%E8%A8%AD%E5%AE%9A/%E5%8F%96%E5%BE%97%E3%81%AE%E6%8C%99%E5%8B%95%E3%81%8C%E6%80%9D%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A8%E9%81%95%E3%81%A3%E3%81%9F%E4%BB%B6\">jQueryのカスタムデータ属性(data-*)の設定/取得の挙動が思ったのと違った件</a></p>\n<h3 id=\"カスタムデータってなんぞ\">カスタムデータってなんぞ?</h3>\n<p>HTML5のマークアップ仕様で追加された「カスタムデータ属性」です。\n要素の中で、data-で始まる属性はすべてデータ属性です。JSやjQueryで要素を操作したい時などに適してます。</p>\n<p>コードを比較するとJSの方が簡単に属性の値を取得できるのがわかります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//jQuery\nelm.attr('src') //ソース\nelm.attr('height') //高さ\nelm.attr('width') //幅\nelm.attr('data-src') //カスタムデータ\nelm.attr('alt') //代替テキスト\n// JS\nelm.src //ソース\nelm.height //高さ\nelm.width //幅\nelm.alt //代替テキスト\nelm.getAttribute('data-src') //カスタムデータ\n// カスタムデータ ~ IE10以外\nelm.dataset.src</code></pre></div>\n<h3 id=\"要素の操作\">要素の操作</h3>\n<p>せっかくなのでカスタムデータ属性のdata-srcに格納されている値をsrcに代入してみましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// jQuery\nelm.attr('src',elm.attr('data-src'))\n// JS\nelm.src = elm.getAttribute('data-src')/pre</code></pre></div>\n<p>不要になったカスタムデータ属性data-srcをまるっと削除します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// jQuery\nelm.removeAttr('data-src')\n// J\nelm.removeAttribute('data-src')</code></pre></div>\n<h2 id=\"まとめ\">まとめ</h2>\n<p>今回はJSとjQueryを比較してみましたがいかがでしたでしょうか？</p>\n<p>とはいえすベてをJSで実装すると、書いたことがない人にとっては学習コストもかかるし実際かくとjQueryに比べるとコードが長くなるので、手早く実装したい時はjQueryに軍配が上がります。</p>\n<p>個人的には直書きはJS、外部ファイルはjQueryという感じで使い分けることが多いです。オススメはjQueryはCDNで読み込んだり、async(非同期)にしたり、ワンソースにするなど工夫することです。うまく使い分けると良いですね。</p>"}