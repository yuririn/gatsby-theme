---
title: Slim Framework でフォームを作る
date: 2025-04-06
pageType: blog
hero: thumbnail/2025/entry550.jpg
cateId: web-developer
tags: ["PHP"]
description: 
---

ちょっと前、急いでいたあまりフォームをスクラッチで作成せざるを得ない事案が発生しました。

フォームをスクラッチで作成するなど、私いち個人の業界15年で培ったフィロソフィーからしても *正気の沙汰ではない* と思っています。そこで、鬼気迫る状況下でも困らないよう、framework を導入してフォームを作成する手順をまとめてみました。

<msg txt="こ、これを使うのは危険だろ。。。。"></msg>

その昔 fuelPHP で似たようなことをしましたが、最新版は2019年6月にアップデートされた1.8.2のみ。

かといって Laravel 実装したいことに対して重すぎる。。。

そこで今回は軽量なことで定評あり導入しやすい Slim framework を活用してみたいと思います。

https://www.slimframework.com/

*やりたいこと*
* Xserverなどのサーバーに実装できる
* Dockerでしっかり環境を作ってテストしたい
* api化して、JSで非同期で送信したい

## 環境構築
まずは基本のディレクトリ構造です。
```
myproject/
    ├-- public_html/
    │   ├-- .htaccess
    │   └-- index.php
    ├-- slim_app/ (public以下以外のファイルは全てここに置く)
    │   ├-- vendor/
    │   │ ....
    │   └-- app/
    ├-- web/
    │   ├-- Dockerfile
    │   ├-- php_errors.log
    │   └-- php.ini
```

### Slim をComposer経由でインストール
まず、コンポーザーがあるか確認します。けっこう使うので昔インストールしていることも。

```shell:title=コマンド
 composer -v
```
なければ以下リンクに沿って、コンポーザーをインストールします。

[Download Composer](https://getcomposer.org/download/)

プロジェクトディレクトリで以下コマンドを実行。コンポーザー経由でslimをインストールします。

versionが古い場合（2025年1月現在Latest: v2.8.8）はアップデートしておきましょう。

```shell:title=コマンド
composer self-update
```

```shell:title=コマンド
composer create-project slim/slim-skeleton slim_app
```
`slim_app/`に落ちてきた `public` ディレクトリ を `public_html` と名称変更し `slim_app/` と同じ階層に並べます。

### Docker 環境作成
Docker 環境作成の説明は割愛します。

エラーで躓いたり、困ったら以下記事を参考にしてください。

<card slug="entry480"></card>

<card slug="entry549"></card>

```yaml:title=docker-compose.yml
services:
  slim_app:
    build:
      context: ./web
    container_name: slim_app
    volumes:
      - ./slim_app:/var/www/slim_app
      - ./public_html:/var/www/public_html
      - ./web/php.ini:/usr/local/etc/php/php.ini # PHP設定ファイルをコンテナにマウント
      - ./web/php_errors.log:/var/log/php_errors.log #phpエラー出力
      - ./web/000-default.conf:/etc/apache2/sites-available/000-default.conf
    ports:
      - "8080:80" # ローカルでポート8080で公開
    networks:
      - slim_network
    depends_on:
      - slim_mailhog

  slim_mailhog:
    privileged: true
    image: 'mailhog/mailhog:latest'
    container_name: slim_mailhog
    ports:
      - "8025:8025" # MailHogのWebインターフェース
      - "1025:1025" # SMTPポート（PHPのメール送信で使用）
    networks:
      - slim_network

networks:
  slim_network:
    driver: bridge
```
```yaml:title=web/Dockerfile
FROM php:8.2-apache

# 必要なモジュールをインストール
RUN apt-get update && apt-get install -y \
    libzip-dev unzip curl vim telnet\
    && docker-php-ext-install zip pdo_mysql

# Slim Frameworkのインストール
WORKDIR /var/www/slim_app

# mhsendmailをインストール
RUN cd /usr/local/bin && \
    curl -sSL https://github.com/mailhog/mhsendmail/releases/download/v0.2.0/mhsendmail_linux_amd64 -o mhsendmail && \
    chmod +x mhsendmail

# Apacheのリライトモジュールを有効化
RUN a2enmod rewrite
```
```ini:title=web/php.ini
[PHP]
display_errors = On
log_errors = On
error_log = /var/log/php_errors.log
memory_limit = 512M
post_max_size = 100M
upload_max_filesize = 50M

[mail function]
sendmail_path = "/usr/local/bin/mhsendmail -smtp-addr=slim_mailhog:1025"
```
```html:title=web/000-default.conf
<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/public_html

    <Directory /var/www/public_html>
        AllowOverride All
        Require all granted
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
```
```shell:title=コマンド
docker-compose up -d
```

### public_html内のファイルのパスを修正
public/index.php にはエントリポイントとしてのファイルが置かれています。そのパスを `/../` を `/../slim_app/`2修正します。
もしフォームをさらに1層下に置く場合は`/../../slim_app/`等、適宜設定を変えてください。

そうすると、http://localhost:8080/ にアクセスするとHello, world が表示されます。

* [サイト:http://localhost:8080/](http://localhost:8080/) → Hello, world!!
* [mailhog:http://localhost:8025/](http://localhost:8025/)
![mailhog](./images/04//entry549-2.jpg)

## Slim framework でフォーム作成

```
myproject/
    ├-- public_html/
    │   ├-- .htaccess
    │   ├-- index.html(追加)
    │   ├-- form.htmll(追加)
    │   ├-- .htaccess
    │   └-- index.php
    ├-- slim_app/ (public以下以外のファイルは全てここに置く)
    │   │ ....
    │   ├-- app/
    │   │    └-- routes.php
    ├-- web/
    │   ├-- Dockerfile
    │   ├-- php_errors.log
    │   └-- php.ini
```
さっそく、slimでフォームを作ります。

今回は、テンプレートは予めhmtlで作成しているので、そのまま使います。

routes.php から `/form` にアクセスしたら、`public_html/form.html` を読み込むようにします。

```php:title=slim_app/app/routes.php
<?php

declare(strict_types=1);

use App\Application\Actions\User\ListUsersAction;
use App\Application\Actions\User\ViewUserAction;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Slim\App;
use Slim\Interfaces\RouteCollectorProxyInterface as Group;

return function (App $app) {
  $app->options('/{routes:.*}', function (Request $request, Response $response) {
      // CORS Pre-Flight OPTIONS Request Handler
      return $response;
  });
  // ↓↓↓変更
  $app->get('/', function (Request $request, Response $response) {
    $formHtml = file_get_contents(__DIR__ . '/../../public_html/index.html'); 
    $response->getBody()->write($formHtml);
    return $response;
  });
  // ↓↓↓追加
  $app->get('/form', function ($request, $response, $args) {
    // 外部ファイルを読み込む
    $formHtml = file_get_contents(__DIR__ . '/../../public_html/form.html'); 
    $response->getBody()->write($formHtml);
    return $response;
  });
};
```
トップページ
```html:title=index.html
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
  <p>Hello, world!</p>
</body>
</html>
```
フォームのテンプレhtml
```html:title=form.html
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
  <p>Hello, world!</p>
</body>
</html>
```

.htaccess で index.html や form.html にアクセスできないようにしておきます。

```shell:title=public_html/.htaccess
<IfModule>
  RewriteCond %{REQUEST_URI}::$1 ^(/.+)/(.*)::\2$
  RewriteRule ^(.*) - [E=BASE:%1]
  
  # If the above doesn't work you might need to set the `RewriteBase` directive manually, it should be the
  # absolute physical path to the directory that contains this htaccess file.
  # RewriteBase /

  RewriteRule ^index\.html$ / [R=301,L]
  RewriteRule ^form\.html$ /form [R=301,L]
  
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteRule ^ index.php [QSA,L]
</IfModule>
```
### Slim フォームのロジックを作る

フォームといえばバリデーションなので、Slimとの相性がよく、広範なルールを提供するシンプルなバリデーションライブラリの`Respect\Validation`を導入します。

```
composer require respect/validation
```
