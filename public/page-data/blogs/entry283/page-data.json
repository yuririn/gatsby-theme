{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/entry283/","result":{"data":{"site":{"siteMetadata":{"title":"銀ねこアトリエ"}},"allFile":{"edges":[{"node":{"name":"entry211","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8b888","images":{"fallback":{"src":"/static/c00a1ad6ac74b4ff881b3a105663bb57/0fbb2/entry211.png","srcSet":"/static/c00a1ad6ac74b4ff881b3a105663bb57/294f4/entry211.png 375w,\n/static/c00a1ad6ac74b4ff881b3a105663bb57/0fbb2/entry211.png 640w","sizes":"(min-width: 640px) 640px, 100vw"},"sources":[{"srcSet":"/static/c00a1ad6ac74b4ff881b3a105663bb57/fd9fd/entry211.webp 375w,\n/static/c00a1ad6ac74b4ff881b3a105663bb57/66a24/entry211.webp 640w","type":"image/webp","sizes":"(min-width: 640px) 640px, 100vw"}]},"width":640,"height":480}}}}]},"markdownRemark":{"id":"bf7e14b4-5854-5ef3-a8cc-46509195f341","excerpt":"ねえねえ知ってる？ WordPress の自作した機能は整理しておかないと、めちゃめちゃカオスになるんだよ WordPress で自作した機能はまとめておかないとめちゃめちゃカオスになります泣（経験者は語る） 自作する機能が増えてくると、ついつい functions.php…","html":"<h2 id=\"ねえねえ知ってる？-wordpress-の自作した機能は整理しておかないと、めちゃめちゃカオスになるんだよ\">ねえねえ知ってる？ WordPress の自作した機能は整理しておかないと、めちゃめちゃカオスになるんだよ</h2>\n<p>WordPress で自作した機能はまとめておかないとめちゃめちゃカオスになります泣（経験者は語る）</p>\n<p>自作する機能が増えてくると、ついつい functions.php 内が長ーーいコードになってしまい、後から修正するときに何をどこに書いたか忘れてしまうということもあると思います。コメント入れていますが、どういう関数に書いたか、どんな機能を追加したかも忘れてしまう始末。</p>\n<p><strong>昨日食べたご飯もなにだったか忘れる</strong>のに覚えてられるかーーーー！</p>\n<p>その対策として、私は今まで functions.php に機能ごとに分けてインクルードしていました。</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// ショートコード----------------------------------------------</span>\n<span class=\"token keyword\">require</span> <span class=\"token function\">get_template_directory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/functions/shortcode.php'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>この方法に切り替えてからは、1ファイルにまとめて書いていた頃より、なんぼか楽にはなりましたがやっぱりカオスっちゃカオス。</p>\n<p>一個間違えたらみなこける！みんな仲良しすぎ！</p>\n<p>どうにかならんもんかなーと思っておりましたら、数年前からプラグインにまとめると幸せになれるよ、という声を各方面からチラチラ聞いていたのでやっと重い腰をあげてやってみることにしました。</p>\n<h2 id=\"プラグインにまとめるメリット\">プラグインにまとめるメリット</h2>\n<p>プラグイン化するメリットは以下の通りです。</p>\n<ul>\n<li>管理画面をプラグイン一覧を見ればどんな機能を入れたか一目瞭然。運用中は目に見えて使わない機能は何実装していたっけと良くなるので地味に助かるし、コードを書かない人たちにも可視化できるのは嬉しい</li>\n<li>ファイルが機能ごとにまとめられてスッキリ。機能ごとにフォルダにまとめられる上に、めちゃめちゃ整理整頓されます。スパゲティコードも回避できます</li>\n<li>機能ごとにプラグイン化してあるので、他テーマへの使い回しが楽</li>\n<li>プラグインごとに機能を自作してデバッグすればいいので、何でエラーを吐いているかとか開発もしやすい</li>\n</ul>\n<p>チームでも共有・共同開発もしやすくなると思いますし、とにもかくも、<strong>取っ散らかる前にプラグイン化して整理する</strong>に限ります。</p>\n<h2 id=\"プラグイン化の方法\">プラグイン化の方法</h2>\n<p>プラグイン化はとっても簡単です。</p>\n<p>wp-content/plugins 内にファイルを突っ込むだけです。\n例えば sample.php といったファイルに機能を書くなら、中身はこんな感じです。</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">/**\n* @package sample\n* @version 1.0\n*/</span>\n<span class=\"token comment\">/*\nPlugin Name: サンプル\nDescription: サンプルだよーーーん\nAuthor: 銀ねこアトリエ\nVersion: 1.0\nAuthor URI: http://172.16.54.25/\n*/</span></span></code></pre></div>\n<p>といった感じでファイルの冒頭に書くだけです。プラグイン一覧に以下のように出力されます。\n<img src=\"./images/2018/entry283-1.png\" alt=\"プラグイン一覧に以下\"></p>\n<h2 id=\"さらに細分化して複数のファイルに機能を分けてフォルダにまとめたい場合\">さらに細分化して複数のファイルに機能を分けてフォルダにまとめたい場合</h2>\n<p>例えば、SEO で必要なタイトルタグやメタディスクリプションなどをカスタムフィールドで投稿画面に実装することもあると思います。<br>\nしかも、文字数カウンターをつけたりCSSで調整してリッチにしたい場合、専用のCSSやJSも用意しないといけない場合もあります。<br>\nその他 SEO 的に必要な構造化データを出力したくなったりと機能は山盛りになってしまいます。<br>\nそんな時こそプラグインにまとめるとスッキリします。</p>\n<p>以下のようなファイル構造でプラグインを作ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seo_set/\n  |  customfield.php\n  |  jsonld.php\n  |  meta.php\n  |  ogp.php\n  |  seo_set.php\n  └ assets /\n    ├ css/\n     |    seo_style.css\n    └ js/\n           seo_script.js</code></pre></div>\n<p>seo_set.php には以下のようなコードで他のファイル類を読み込みます。</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">/**\n* @package seo_set\n* @version 1.0\n*/</span>\n<span class=\"token comment\">/*\nPlugin Name: SEOの設定\nDescription: ページごとに任意のタイトルやサイトの説明を投稿画面から編集できます。\nAuthor: 銀ねこアトリエ\nVersion: 1.0\nAuthor URI: http://172.16.54.25/\n*/</span><span class=\"token comment\">//プラグインのパス</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'SEO__PLUGIN_DIR'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">plugin_dir_path</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//各ファイルをインクルードする</span>\n<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SEO__PLUGIN_DIR</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'customfield.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SEO__PLUGIN_DIR</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'jsonld.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SEO__PLUGIN_DIR</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'meta.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SEO__PLUGIN_DIR</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'ogp.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>あとは各ファイルにコードを書いていきます。</p>\n<h2 id=\"おまけ：プラグイン内のcssやjsを管理画面に適応する場合\">おまけ：プラグイン内のCSSやJSを管理画面に適応する場合</h2>\n<p>プラグイン内のJSやCSSを管理画面に適応する場合は<code class=\"language-text\">admin_enqueue_scripts</code>を使用します。scripts なんて言っているけどスタイルとかのデータも追記してくれます。</p>\n<p>個人的には管理画面くらいなら、モバイルファーストインデックスを意識しなくていいと思うので、ファイルが多少細分化しても管理画面が重くなけりゃいいと思う。</p>\n<p>ちなみに、エンキュー(encueue)とはキュー(cueue/先に入れたものが先に出る構造になっている何か)にデータを入れることだそう。</p>\n<p>よくキュー状態とか言いますよね？会社で複数人で一つのプリンターとか使った経験がある人ならわかるかも。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// CSS/JSの読み込み\nfunction custom_enqueue($hook_suffix)\n{\n    // 新規投稿または編集画面のみに適応\n    if ('post.php' == $hook_suffix || 'post-new.php' == $hook_suffix) {\n        $jspath = plugins_url('assets/js/script.js', __FILE__);\n        $csspath = plugins_url('assets/css/css_style.css', __FILE__);        wp_enqueue_script('vue', '//cdnjs.cloudflare.com/ajax/libs/vue/2.5.2/vue.min.js', array(), '1.0.0', true);\n        wp_enqueue_script('seo_script', $jspath, array(), '1.0.0', true);\n        wp_enqueue_style('seo_css', $csspath, array(), '1.0.0');\n    }\n}// 関数を管理画面のキューアクションにフック\nadd_action('admin_enqueue_scripts', 'custom_enqueue');</code></pre></div>\n<p>admin_enqueue_scripts の用法もっと詳しく載ってないかなと思い、WordPress Codex 行ってリファレンス探してみたら英語しかありませんでした笑</p>\n<p><a href=\"https://codex.wordpress.org/Plugin_API/Action_Reference/admin_enqueue_scripts\">Plugin API/Action Reference/admin enqueue scripts</a></p>\n<h2 id=\"まとめ：たくさんカスタマイズしたいならプラグイン化するのは絶対オススメ！\">まとめ：たくさんカスタマイズしたいならプラグイン化するのは絶対オススメ！</h2>\n<p>以上、WordPress の自作した機能をWordPressにまとめる方法をご紹介いたしました。</p>\n<p>今回はプラグイン化の方法のみのご紹介です。</p>\n<p>中身は頑張って書いてくださいね。えへっ</p>","tableOfContents":"<ul>\n<li><a href=\"#%E3%81%AD%E3%81%88%E3%81%AD%E3%81%88%E7%9F%A5%E3%81%A3%E3%81%A6%E3%82%8B%EF%BC%9F-wordpress-%E3%81%AE%E8%87%AA%E4%BD%9C%E3%81%97%E3%81%9F%E6%A9%9F%E8%83%BD%E3%81%AF%E6%95%B4%E7%90%86%E3%81%97%E3%81%A6%E3%81%8A%E3%81%8B%E3%81%AA%E3%81%84%E3%81%A8%E3%80%81%E3%82%81%E3%81%A1%E3%82%83%E3%82%81%E3%81%A1%E3%82%83%E3%82%AB%E3%82%AA%E3%82%B9%E3%81%AB%E3%81%AA%E3%82%8B%E3%82%93%E3%81%A0%E3%82%88\">ねえねえ知ってる？ WordPress の自作した機能は整理しておかないと、めちゃめちゃカオスになるんだよ</a></li>\n<li><a href=\"#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%82%8B%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\">プラグインにまとめるメリット</a></li>\n<li><a href=\"#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E5%8C%96%E3%81%AE%E6%96%B9%E6%B3%95\">プラグイン化の方法</a></li>\n<li><a href=\"#%E3%81%95%E3%82%89%E3%81%AB%E7%B4%B0%E5%88%86%E5%8C%96%E3%81%97%E3%81%A6%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E6%A9%9F%E8%83%BD%E3%82%92%E5%88%86%E3%81%91%E3%81%A6%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88\">さらに細分化して複数のファイルに機能を分けてフォルダにまとめたい場合</a></li>\n<li><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91%EF%BC%9A%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E5%86%85%E3%81%AEcss%E3%82%84js%E3%82%92%E7%AE%A1%E7%90%86%E7%94%BB%E9%9D%A2%E3%81%AB%E9%81%A9%E5%BF%9C%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88\">おまけ：プラグイン内のCSSやJSを管理画面に適応する場合</a></li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81%EF%BC%9A%E3%81%9F%E3%81%8F%E3%81%95%E3%82%93%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%81%97%E3%81%9F%E3%81%84%E3%81%AA%E3%82%89%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E5%8C%96%E3%81%99%E3%82%8B%E3%81%AE%E3%81%AF%E7%B5%B6%E5%AF%BE%E3%82%AA%E3%82%B9%E3%82%B9%E3%83%A1%EF%BC%81\">まとめ：たくさんカスタマイズしたいならプラグイン化するのは絶対オススメ！</a></li>\n</ul>","frontmatter":{"title":"WordPress で自作した機能を plugin 化してまとめると幸せになれた","date":"2018.08.14","description":"WordPress のfunctions.php に書いていく、自作した機能をプラグインごとにまとめたらめちゃめちゃ便利だったのでその方法をメモっておきます。","lead":["WordPress のfunctions.php に書いていく、自作した機能をプラグインごとにまとめたらめちゃめちゃ便利だったのでその方法をメモっておきます。"],"hero":"2014/entry211.png","cateId":"cms","tags":["WordPress"],"pagetype":"blog","modifieddate":null}},"previous":{"fields":{"slug":"/blogs/entry282/"},"frontmatter":{"title":"concrete5でページリストブロックの絞り込みをカスタマイズしてみた"}},"next":{"fields":{"slug":"/blogs/entry276/"},"frontmatter":{"title":"やりたかったから広島でSEOの勉強会します！"}}},"pageContext":{"id":"bf7e14b4-5854-5ef3-a8cc-46509195f341","previousPostId":"cdcb96be-a6bf-5fb6-bf46-c67b0013491f","nextPostId":"bf43fc39-262a-5931-9c95-e85446aa2934","hero":"2014/entry211.png"}},"staticQueryHashes":["1145805751","2829560153","3000541721","3766793980"]}