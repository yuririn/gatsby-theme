{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/entry313/","result":{"data":{"site":{"siteMetadata":{"title":"銀ねこアトリエ"}},"allFile":{"edges":[{"node":{"name":"entry267","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#686858","images":{"fallback":{"src":"/static/26d255e812269790c9718ae1f173682d/0fbb2/entry267.png","srcSet":"/static/26d255e812269790c9718ae1f173682d/294f4/entry267.png 375w,\n/static/26d255e812269790c9718ae1f173682d/0fbb2/entry267.png 640w","sizes":"(min-width: 640px) 640px, 100vw"},"sources":[{"srcSet":"/static/26d255e812269790c9718ae1f173682d/fd9fd/entry267.webp 375w,\n/static/26d255e812269790c9718ae1f173682d/66a24/entry267.webp 640w","type":"image/webp","sizes":"(min-width: 640px) 640px, 100vw"}]},"width":640,"height":480}}}}]},"markdownRemark":{"id":"21a2e968-369b-572d-9724-3943bb32f55d","excerpt":"element.submit()でフォームを send できる 最近、Vue.js などで画面遷移することなくフォームを実装することも多くなりました。あと、リターンキーでフォームの誤送信が起こらないようにして欲しいなどという要望も多めです。なのでフォーム操作をJS…","html":"<h2 id=\"elementsubmitでフォームを-send-できる\">element.submit()でフォームを send できる</h2>\n<p>最近、Vue.js などで画面遷移することなくフォームを実装することも多くなりました。あと、リターンキーでフォームの誤送信が起こらないようにして欲しいなどという要望も多めです。なのでフォーム操作をJS制御することって多々あるもんなんです。</p>\n<h2 id=\"フォームの-submit-をとめる方法を考える\">フォームの submit をとめる方法を考える</h2>\n<p>一定条件に満たした場合にフォームを送る時、JS で実装するときふた通りあると思います。<br>\nまずは form タグ内に <code class=\"language-text\">input[type=submit]</code>ボタンを設置する。条件に満たない場合、フォーム機能を止めることもできます。<br>\nもしくは <code class=\"language-text\">input[type=submit]</code> を使わず、特定の button もしくは<code class=\"language-text\">input[type=button]</code> でクリックした時に、<code class=\"language-text\">submit()</code> を発火させる。\nいずれかだと思います。</p>\n<h2 id=\"name-属性に-submit-があるだけで、js-が死ぬ\">name 属性に submit があるだけで、JS が死ぬ</h2>\n<p>後者で操作する時、面倒なことに <code class=\"language-text\">element.submit()</code> は真っ先に name属性に万が一 submit があるだけで、拾ってしまって動かなくなります。</p>\n<p>焦る必要はありません。解決法は超簡単です。name属性の命名を<code class=\"language-text\">submit_btn</code>とか変えましょう。</p>\n<h2 id=\"終わりに\">終わりに</h2>\n<p>前も似たようなことで、name属性に気をつけなければならないと思いました。<br>\nたかだか、そんなもので送信ボタンは動くのでちょっと気をつければいいだけですが気をつけてください。</p>","tableOfContents":"<ul>\n<li><a href=\"#elementsubmit%E3%81%A7%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%82%92-send-%E3%81%A7%E3%81%8D%E3%82%8B\">element.submit()でフォームを send できる</a></li>\n<li><a href=\"#%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%AE-submit-%E3%82%92%E3%81%A8%E3%82%81%E3%82%8B%E6%96%B9%E6%B3%95%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\">フォームの submit をとめる方法を考える</a></li>\n<li><a href=\"#name-%E5%B1%9E%E6%80%A7%E3%81%AB-submit-%E3%81%8C%E3%81%82%E3%82%8B%E3%81%A0%E3%81%91%E3%81%A7%E3%80%81js-%E3%81%8C%E6%AD%BB%E3%81%AC\">name 属性に submit があるだけで、JS が死ぬ</a></li>\n<li><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\">終わりに</a></li>\n</ul>","frontmatter":{"title":"JS でフォーム操作したいなら name 属性に submit をつけてはならない","date":"2019.02.21","description":"フォーム操作したい時 JS で値を追加したり、操作したい時があると思います。そんな時、name 属性の命名に注意ください！場合によっては JS が動かねーから要注意です。","lead":["フォーム操作したい時 JS で値を追加したり、操作したい時があると思います。そんな時、name 属性の命名に注意ください！場合によっては JS が動かねーから要注意です。"],"hero":"2018/entry267.png","cateId":"web-developer","tags":["JavaScript"],"pagetype":"blog","modifieddate":null}},"previous":{"fields":{"slug":"/blogs/entry315/"},"frontmatter":{"title":"CSS3 アニメーションで軽量なアコーディオンメニューを作ろう！"}},"next":{"fields":{"slug":"/blogs/entry311/"},"frontmatter":{"title":"超手軽！ビルトインサーバー使ってみました"}}},"pageContext":{"id":"21a2e968-369b-572d-9724-3943bb32f55d","previousPostId":"87da699d-c916-5280-8ea5-9a2cd94ca8d2","nextPostId":"7f43e7fe-d9b1-511e-a70d-8bf63686101b","hero":"2018/entry267.png"}},"staticQueryHashes":["1145805751","2829560153","3000541721","3766793980"]}